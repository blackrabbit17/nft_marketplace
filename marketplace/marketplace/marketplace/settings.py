"""
Django settings for marketplace project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
# TODO: ALAINR move this to env variable
SECRET_KEY = 'django-insecure-g_qf6#nbv-351z90ffs4g9&lw1n%=k8nnecld)(newhr72e7$&'


ENV_PRODUCTION = 0
ENV_DEVELOPMENT = 2
ENV_STAGING = 3  # TODO ALAINR: No staging server yet


if os.environ.get('MARKETPLACE_DEBUG') is None:
    logging.info('PACTUM Marketplace running in PRODUCTION mode')
    DEBUG = False
    ALLOWED_HOSTS = ['pactumx.com', 'www.pactumx.com', 'pactumx.io', 'www.pactumx.io', 'app.pactumx.io', 'app.pactumx.com', 'localhost']
    CURRENT_ENVIORNMENT = ENV_PRODUCTION
    URL_ROOT = 'https://pactumx.io/'
else:
    logging.info('PACTUM Marketplace running in DEBUG mode')
    DEBUG = True
    ALLOWED_HOSTS = []
    CURRENT_ENVIORNMENT = ENV_DEVELOPMENT
    URL_ROOT = 'http://localhost:8000/'


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django_quill',
    'currency',
    'dev',
    'news',
    'nft',
    'userprofile',
    'statistics',
    'bgworker'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#if DEBUG:
#    logging.info('CORS Enabled because server is in DEBUG mode')

INSTALLED_APPS.append('corsheaders')
MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True


ROOT_URLCONF = 'marketplace.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR) + '/web/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'marketplace.wsgi.application'


DB_USER = os.environ.get('MARKETPLACE_DB_USER')
DB_PASS = os.environ.get('MARKETPLACE_DB_PASS')

if DB_USER is None or DB_PASS is None:
    raise ValueError("Environment variables not configured, you need to set MARKETPLACE_DB_USER and MARKETPLACE_DB_PASS")


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'marketplace',
        'USER': DB_USER,
        'PASSWORD': DB_PASS,
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = False



STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "ui"
]


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# All settings below must have trailing slash
UPLOAD_ROOT = BASE_DIR / 'UPLOAD'

UPLOAD_PROFILE_URL_ROOT = URL_ROOT + 'api/1.0/static/profile/'
UPLOAD_PROFILE_FILESYSTEM_LOCATION = UPLOAD_ROOT / 'profiles/'

# NFT Image Previws
UPLOAD_NFT_IMG_URL_ROOT = URL_ROOT + 'api/1.0/static/nft_img/'
UPLOAD_NFT_IMG_FILESYSTEM_LOCATION = [UPLOAD_ROOT / 'nft_img/', UPLOAD_ROOT / '_sample_nft_img/']

# NFT Files themselves
UPLOAD_NFT_FILE_URL_ROOT = URL_ROOT + 'api/1.0/static/nft_file/'
UPLOAD_NFT_FILE_FILESYSTEM_LOCATION = [UPLOAD_ROOT / 'nfts/', ]


CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SAMESITE = 'None'

